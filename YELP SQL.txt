Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000, 6493 
viii. Tip = 537, 3979 
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780 

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:  select * 
						      from user 
							where compliment_photos  is null
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
		
select 
  business.city, 
  count(review.id) as review_count 
from 
  business 
  inner join review 
where 
  business.id = review.id 
group by 
  business.city 
order by 
  review_count desc



	Copy and Paste the Result Below: 
	
+-------------+--------------+
| city        | review_count |
+-------------+--------------+
| Las Vegas   |            3 |
| Phoenix     |            2 |
| Belmont     |            1 |
| Brook Park  |            1 |
| Champaign   |            1 |
| Gastonia    |            1 |
| Macedonia   |            1 |
| Madison     |            1 |
| Peoria      |            1 |
| Scarborough |            1 |
| Tempe       |            1 |
+-------------+--------------+
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
  stars, 
  COUNT(*) AGG 
FROM 
  business 
where 
  city = 'Avon' 
GROUP BY 
  "stars"

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
				+-------+-------------+
				| stars | AGG         |
				+-------+-------------+
				|   1.5 |           1 |
				|   2.5 |           2 |
				|   3.5 |           3 |
				|   4.0 |           2 |	
				|   4.5 |           1 |
				|   5.0 |           1 |
				+-------+-------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT 
  stars, 
  COUNT(*) AGG 
FROM 
  business 
where 
  city like '%beachwood%' 
GROUP BY 
  "stars"


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------------+
| stars | AGG
+-------+-------------+
|   2.0 |           1 |
|   2.5 |           1 |
|   3.0 |           2 |
|   3.5 |           2 |
|   4.0 |           1 |
|   4.5 |           2 |
|   5.0 |           5 |
+-------+-------------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
			
select 
  id, 
  review_count 
from 
  user 
order by 
  review_count desc 
limit 
  3

	Copy and Paste the Result Below:
+------------------------+--------------+
| id                     | review_count |
+------------------------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| -3s52C4zL_DHRK0ULG6qtg |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+------------------------+--------------+	


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
		
		No, there are only 14 distinct fans common in the review and business table. 
	 	These few people have repeatedly posted many reviews hence, it's not necessary that there are more fans.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with word "love"
+------+------+
| love | hate |
+------+------+
| 1780 |  232 |
+------+------+

	
	SQL code used to arrive at answer:

select 
  count(
    case when text like '%love%' then 1 else null end
  ) as love, 
  count(
    case when text like '%hate%' then 1 else null end
  ) as hate 
from 
  review

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

select 
  id, 
  fans 
from 
  user 
order by 
  fans desc 
limit 
  10

	
	Copy and Paste the Result Below:

+------------------------+------+
| id                     | fans |
+------------------------+------+
| -9I98YbNQnLdAmcYfb324Q |  503 |
| -8EnCioUmDygAbsYZmTeRQ |  497 |
| --2vR0DIsmQ6WfcSzKWigw |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw |  159 |
| -9bbDysuiWeo2VShFJJtcw |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ |  126 |
| -9da1xk7zgnnfO1uTVYGkA |  124 |
| -lh59ko3dxChBSZ9U7LfUw |  120 |
+------------------------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	AS you can see, the high rating groups have 12 different spreads of hours 
	compared to the 2 different spreads of hours low rating group.

select 
  distinct(hours), 
  rating_group 
from 
  (
    select 
      c.category, 
      h.hours, 
      case when avg(b.stars) between 2 
      and 3 then 'low' else 'high' end as rating_group 
    from 
      business b, 
      category c, 
      hours h 
    where 
      (b.id = c.business_id) 
      and (b.id = h.business_id) 
      and b.city like '%las vegas%' 
    group by 
      c.category 
    order by 
      rating_group desc
  ) 
group by 
  rating_group, 
  hours


+----------------------+--------------+
| hours                | rating_group |     
| Monday|7:30-17:00    | high         |
| Monday|8:00-17:00    | high         |
| Saturday|0:00-0:00   | high         |
| Saturday|10:00-16:00 | high         |
| Saturday|10:00-19:00 | high         |
| Saturday|10:00-23:00 | high         |
| Saturday|11:00-0:00  | high         |
| Saturday|11:00-20:00 | high         |
| Saturday|8:00-12:00  | high         |
| Saturday|8:00-16:30  | high         |
| Saturday|8:00-22:00  | high         |
| Saturday|9:00-17:00  | high         |
| Saturday|11:00-0:00  | low          |
| Saturday|8:00-22:00  | low          |
+----------------------+--------------+

+----------------------+--------------+

ii. Do the two groups you chose to analyze have a different number of reviews?
	Yes, the high rating group has more reviews than the low rating group
	
select 
  sum(review_count), 
  rating_group 
from 
  (
    select 
      c.category, 
      b.review_count, 
      case when avg(b.stars) between 2 
      and 3 then 'low' else 'high' end as rating_group 
    from 
      business b, 
      category c 
    where 
      b.id = c.business_id 
      and b.city like '%las vegas%' 
    group by 
      c.category 
    order by 
      rating_group, 
      b.review_count desc
  ) 
group by 
  rating_group
       
+-------------------+--------------+
| sum(review_count) | rating_group |
+-------------------+--------------+
|              6735 | high         |
|               147 | low          |
+-------------------+--------------+



         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	yes, the high-rated businesses are located in one place (possibly in a wealthy demographic area) 
	and the lower ones in another place.		

SQL code used for analysis:


select 
  latitude, 
  longitude, 
  rating_group 
from 
  (
    select 
      b.latitude, 
      b.longitude, 
      c.category, 
      b.review_count, 
      case when avg(b.stars) between 2 
      and 3 then 'low' else 'high' end as rating_group 
    from 
      business b, 
      category c 
    where 
      b.id = c.business_id 
      and b.city like '%las vegas%' 
    group by 
      c.category 
    order by 
      rating_group, 
      b.review_count desc
  ) 
group by 
  rating_group

+----------+-----------+--------------+
| latitude | longitude | rating_group |
+----------+-----------+--------------+
|  36.1259 |  -115.135 | high         |
|  36.1007 |  -115.091 | low          |
+----------+-----------+--------------+

		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Businesses that are still open have many reviews and with better average ratings than the businesses that are closed. 
		     The businesses that are open should've possibly provided better service than the closed ones implied by their higher ratings.  

select 
  sum(review_count), 
  avg(stars), 
  is_open 
from 
  business 
group by 
  is_open, 
  stars

+-------------------+------------+---------+
| sum(review_count) | avg(stars) | is_open |
+-------------------+------------+---------+
|                68 |        1.0 |       0 |
|               219 |        1.5 |       0 |
|              1193 |        2.0 |       0 |
|              3352 |        2.5 |       0 |
|              5898 |        3.0 |       0 |
|              9114 |        3.5 |       0 |
|              9699 |        4.0 |       0 |
|              4881 |        4.5 |       0 |
|               837 |        5.0 |       0 |
|               893 |        1.0 |       1 |
|              2443 |        1.5 |       1 |
|              6627 |        2.0 |       1 |
|             13456 |        2.5 |       1 |
|             30397 |        3.0 |       1 |
|             62211 |        3.5 |       1 |
|             87345 |        4.0 |       1 |
|             49057 |        4.5 |       1 |
|             16871 |        5.0 |       1 |
+-------------------+------------+---------+
         
ii. Difference 2: the open businesses have more checkin count than the closed businesses.
         
         
         
SQL code used for analysis:
select 
  count(c.count), 
  is_open 
from 
  checkin c, 
  business b 
where 
  c.business_id = b.id 
group by 
  is_open


+----------------+---------+
| count(c.count) | is_open |
+----------------+---------+
|             12 |       0 |
|            498 |       1 |
+----------------+---------+
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: Clustering
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
        
	I used the tables "business", " hours", and "category" from the Yelp dataset. I wanted to find if there's any similarity or anomaly in the dataset and the results touch base with both the categories.
	I have used business_id and extracted the week_day from the hours table, 
	Id and stars from the business table
	Business_Id and category from the category table.
	
	using the id and business_id I've joined the similar rows together into a unified table. 
	I have used the stars to find the maximum star rating per category.
	furthermore, the extracted week_day from the hours' table is used to map max_stars to week_day to find whether maximum star ratings
	are given in a normal or uniform distribution.
	                   
	The results have shown that people have given great reviews almost only on Friday exclusively.
                  
iii. Output of your finished dataset:
         
+----------+----------+
| week_day | count(*) |
+----------+----------+
| friday   |      207 |
| monday   |       12 |
+----------+----------+
iv. Provide the SQL code you used to create your final dataset:

select 
  distinct(week_day), 
  count(*) 
from 
  (
    select 
      distinct(category), 
      week_day, 
      max(stars) as high_star 
    from 
      business, 
      category c, 
      (
        select 
          business_id, 
          case when hours like '%sunday%' then 'sunday' when hours like '%monday%' then 'monday' when hours like '%tuesday%' then 'tuesday' when hours like '%wednesday%' then 'wednesday' when hours like '%thursday%' then 'thursday' when hours like '%friday%' then 'friday' else 'saturday' end as week_day 
        from 
          hours 
        group by 
          week_day, 
          business_id
      ) k 
    where 
      id = k.business_id 
      and id = c.business_id 
    group by 
      category
  ) 
group by 
  week_day
